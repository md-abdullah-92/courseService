version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: course-service-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: eduverse_course_db
      MYSQL_USER: courseuser
      MYSQL_PASSWORD: coursepassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - course-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # MinIO for file storage (optional)
  minio:
    image: minio/minio:latest
    container_name: course-service-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - course-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Course Service (Spring Boot)
  course-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: course-service-app
    environment:
      # Database Configuration
      DB_USERNAME: courseuser
      DB_PASSWORD: coursepassword
      DATABASE_URL: jdbc:mysql://mysql:3306/eduverse_course_db
      
      # JWT Configuration
      JWT_SECRET: mySecretKey123456789
      
      # CORS Configuration
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
      
      # MinIO Configuration
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: course-files
      
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "5001:5001"
    networks:
      - course-network
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: course-service-redis
    ports:
      - "6379:6379"
    networks:
      - course-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  minio_data:
    driver: local

networks:
  course-network:
    driver: bridge

# Development override file example
# Create docker-compose.override.yml for development-specific settings:
#
# version: '3.8'
# services:
#   course-service:
#     volumes:
#       - ./target:/app/target
#     environment:
#       SPRING_PROFILES_ACTIVE: dev
#       SPRING_DEVTOOLS_RESTART_ENABLED: true
